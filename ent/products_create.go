// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/baemestrada-source/bitsports/ent/categories"
	"github.com/baemestrada-source/bitsports/ent/products"
)

// ProductsCreate is the builder for creating a Products entity.
type ProductsCreate struct {
	config
	mutation *ProductsMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (pc *ProductsCreate) SetName(s string) *ProductsCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetInfo sets the "info" field.
func (pc *ProductsCreate) SetInfo(s string) *ProductsCreate {
	pc.mutation.SetInfo(s)
	return pc
}

// SetPrice sets the "price" field.
func (pc *ProductsCreate) SetPrice(f float64) *ProductsCreate {
	pc.mutation.SetPrice(f)
	return pc
}

// SetCategorieID sets the "categorie_id" field.
func (pc *ProductsCreate) SetCategorieID(i int) *ProductsCreate {
	pc.mutation.SetCategorieID(i)
	return pc
}

// SetUnionID sets the "union" edge to the Categories entity by ID.
func (pc *ProductsCreate) SetUnionID(id int) *ProductsCreate {
	pc.mutation.SetUnionID(id)
	return pc
}

// SetUnion sets the "union" edge to the Categories entity.
func (pc *ProductsCreate) SetUnion(c *Categories) *ProductsCreate {
	return pc.SetUnionID(c.ID)
}

// Mutation returns the ProductsMutation object of the builder.
func (pc *ProductsCreate) Mutation() *ProductsMutation {
	return pc.mutation
}

// Save creates the Products in the database.
func (pc *ProductsCreate) Save(ctx context.Context) (*Products, error) {
	var (
		err  error
		node *Products
	)
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			if node, err = pc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			if pc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProductsCreate) SaveX(ctx context.Context) *Products {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ProductsCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ProductsCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProductsCreate) check() error {
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Products.name"`)}
	}
	if v, ok := pc.mutation.Name(); ok {
		if err := products.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Products.name": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Info(); !ok {
		return &ValidationError{Name: "info", err: errors.New(`ent: missing required field "Products.info"`)}
	}
	if _, ok := pc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "Products.price"`)}
	}
	if _, ok := pc.mutation.CategorieID(); !ok {
		return &ValidationError{Name: "categorie_id", err: errors.New(`ent: missing required field "Products.categorie_id"`)}
	}
	if _, ok := pc.mutation.UnionID(); !ok {
		return &ValidationError{Name: "union", err: errors.New(`ent: missing required edge "Products.union"`)}
	}
	return nil
}

func (pc *ProductsCreate) sqlSave(ctx context.Context) (*Products, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (pc *ProductsCreate) createSpec() (*Products, *sqlgraph.CreateSpec) {
	var (
		_node = &Products{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: products.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: products.FieldID,
			},
		}
	)
	if value, ok := pc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: products.FieldName,
		})
		_node.Name = value
	}
	if value, ok := pc.mutation.Info(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: products.FieldInfo,
		})
		_node.Info = value
	}
	if value, ok := pc.mutation.Price(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: products.FieldPrice,
		})
		_node.Price = value
	}
	if nodes := pc.mutation.UnionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   products.UnionTable,
			Columns: []string{products.UnionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: categories.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CategorieID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProductsCreateBulk is the builder for creating many Products entities in bulk.
type ProductsCreateBulk struct {
	config
	builders []*ProductsCreate
}

// Save creates the Products entities in the database.
func (pcb *ProductsCreateBulk) Save(ctx context.Context) ([]*Products, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Products, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProductsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProductsCreateBulk) SaveX(ctx context.Context) []*Products {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ProductsCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ProductsCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
