// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/baemestrada-source/bitsports/ent/migrate"

	"github.com/baemestrada-source/bitsports/ent/categories"
	"github.com/baemestrada-source/bitsports/ent/products"
	"github.com/baemestrada-source/bitsports/ent/users"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Categories is the client for interacting with the Categories builders.
	Categories *CategoriesClient
	// Products is the client for interacting with the Products builders.
	Products *ProductsClient
	// Users is the client for interacting with the Users builders.
	Users *UsersClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Categories = NewCategoriesClient(c.config)
	c.Products = NewProductsClient(c.config)
	c.Users = NewUsersClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		Categories: NewCategoriesClient(cfg),
		Products:   NewProductsClient(cfg),
		Users:      NewUsersClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		Categories: NewCategoriesClient(cfg),
		Products:   NewProductsClient(cfg),
		Users:      NewUsersClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Categories.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Categories.Use(hooks...)
	c.Products.Use(hooks...)
	c.Users.Use(hooks...)
}

// CategoriesClient is a client for the Categories schema.
type CategoriesClient struct {
	config
}

// NewCategoriesClient returns a client for the Categories from the given config.
func NewCategoriesClient(c config) *CategoriesClient {
	return &CategoriesClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `categories.Hooks(f(g(h())))`.
func (c *CategoriesClient) Use(hooks ...Hook) {
	c.hooks.Categories = append(c.hooks.Categories, hooks...)
}

// Create returns a create builder for Categories.
func (c *CategoriesClient) Create() *CategoriesCreate {
	mutation := newCategoriesMutation(c.config, OpCreate)
	return &CategoriesCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Categories entities.
func (c *CategoriesClient) CreateBulk(builders ...*CategoriesCreate) *CategoriesCreateBulk {
	return &CategoriesCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Categories.
func (c *CategoriesClient) Update() *CategoriesUpdate {
	mutation := newCategoriesMutation(c.config, OpUpdate)
	return &CategoriesUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CategoriesClient) UpdateOne(ca *Categories) *CategoriesUpdateOne {
	mutation := newCategoriesMutation(c.config, OpUpdateOne, withCategories(ca))
	return &CategoriesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CategoriesClient) UpdateOneID(id int) *CategoriesUpdateOne {
	mutation := newCategoriesMutation(c.config, OpUpdateOne, withCategoriesID(id))
	return &CategoriesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Categories.
func (c *CategoriesClient) Delete() *CategoriesDelete {
	mutation := newCategoriesMutation(c.config, OpDelete)
	return &CategoriesDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CategoriesClient) DeleteOne(ca *Categories) *CategoriesDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CategoriesClient) DeleteOneID(id int) *CategoriesDeleteOne {
	builder := c.Delete().Where(categories.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CategoriesDeleteOne{builder}
}

// Query returns a query builder for Categories.
func (c *CategoriesClient) Query() *CategoriesQuery {
	return &CategoriesQuery{
		config: c.config,
	}
}

// Get returns a Categories entity by its id.
func (c *CategoriesClient) Get(ctx context.Context, id int) (*Categories, error) {
	return c.Query().Where(categories.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CategoriesClient) GetX(ctx context.Context, id int) *Categories {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProducts queries the products edge of a Categories.
func (c *CategoriesClient) QueryProducts(ca *Categories) *ProductsQuery {
	query := &ProductsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(categories.Table, categories.FieldID, id),
			sqlgraph.To(products.Table, products.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, categories.ProductsTable, categories.ProductsColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CategoriesClient) Hooks() []Hook {
	return c.hooks.Categories
}

// ProductsClient is a client for the Products schema.
type ProductsClient struct {
	config
}

// NewProductsClient returns a client for the Products from the given config.
func NewProductsClient(c config) *ProductsClient {
	return &ProductsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `products.Hooks(f(g(h())))`.
func (c *ProductsClient) Use(hooks ...Hook) {
	c.hooks.Products = append(c.hooks.Products, hooks...)
}

// Create returns a create builder for Products.
func (c *ProductsClient) Create() *ProductsCreate {
	mutation := newProductsMutation(c.config, OpCreate)
	return &ProductsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Products entities.
func (c *ProductsClient) CreateBulk(builders ...*ProductsCreate) *ProductsCreateBulk {
	return &ProductsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Products.
func (c *ProductsClient) Update() *ProductsUpdate {
	mutation := newProductsMutation(c.config, OpUpdate)
	return &ProductsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductsClient) UpdateOne(pr *Products) *ProductsUpdateOne {
	mutation := newProductsMutation(c.config, OpUpdateOne, withProducts(pr))
	return &ProductsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductsClient) UpdateOneID(id int) *ProductsUpdateOne {
	mutation := newProductsMutation(c.config, OpUpdateOne, withProductsID(id))
	return &ProductsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Products.
func (c *ProductsClient) Delete() *ProductsDelete {
	mutation := newProductsMutation(c.config, OpDelete)
	return &ProductsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProductsClient) DeleteOne(pr *Products) *ProductsDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProductsClient) DeleteOneID(id int) *ProductsDeleteOne {
	builder := c.Delete().Where(products.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductsDeleteOne{builder}
}

// Query returns a query builder for Products.
func (c *ProductsClient) Query() *ProductsQuery {
	return &ProductsQuery{
		config: c.config,
	}
}

// Get returns a Products entity by its id.
func (c *ProductsClient) Get(ctx context.Context, id int) (*Products, error) {
	return c.Query().Where(products.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductsClient) GetX(ctx context.Context, id int) *Products {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUnion queries the union edge of a Products.
func (c *ProductsClient) QueryUnion(pr *Products) *CategoriesQuery {
	query := &CategoriesQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(products.Table, products.FieldID, id),
			sqlgraph.To(categories.Table, categories.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, products.UnionTable, products.UnionColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProductsClient) Hooks() []Hook {
	return c.hooks.Products
}

// UsersClient is a client for the Users schema.
type UsersClient struct {
	config
}

// NewUsersClient returns a client for the Users from the given config.
func NewUsersClient(c config) *UsersClient {
	return &UsersClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `users.Hooks(f(g(h())))`.
func (c *UsersClient) Use(hooks ...Hook) {
	c.hooks.Users = append(c.hooks.Users, hooks...)
}

// Create returns a create builder for Users.
func (c *UsersClient) Create() *UsersCreate {
	mutation := newUsersMutation(c.config, OpCreate)
	return &UsersCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Users entities.
func (c *UsersClient) CreateBulk(builders ...*UsersCreate) *UsersCreateBulk {
	return &UsersCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Users.
func (c *UsersClient) Update() *UsersUpdate {
	mutation := newUsersMutation(c.config, OpUpdate)
	return &UsersUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UsersClient) UpdateOne(u *Users) *UsersUpdateOne {
	mutation := newUsersMutation(c.config, OpUpdateOne, withUsers(u))
	return &UsersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UsersClient) UpdateOneID(id int) *UsersUpdateOne {
	mutation := newUsersMutation(c.config, OpUpdateOne, withUsersID(id))
	return &UsersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Users.
func (c *UsersClient) Delete() *UsersDelete {
	mutation := newUsersMutation(c.config, OpDelete)
	return &UsersDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UsersClient) DeleteOne(u *Users) *UsersDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UsersClient) DeleteOneID(id int) *UsersDeleteOne {
	builder := c.Delete().Where(users.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UsersDeleteOne{builder}
}

// Query returns a query builder for Users.
func (c *UsersClient) Query() *UsersQuery {
	return &UsersQuery{
		config: c.config,
	}
}

// Get returns a Users entity by its id.
func (c *UsersClient) Get(ctx context.Context, id int) (*Users, error) {
	return c.Query().Where(users.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UsersClient) GetX(ctx context.Context, id int) *Users {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UsersClient) Hooks() []Hook {
	return c.hooks.Users
}
