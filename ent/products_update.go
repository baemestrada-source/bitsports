// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/baemestrada-source/bitsports/ent/categories"
	"github.com/baemestrada-source/bitsports/ent/predicate"
	"github.com/baemestrada-source/bitsports/ent/products"
)

// ProductsUpdate is the builder for updating Products entities.
type ProductsUpdate struct {
	config
	hooks    []Hook
	mutation *ProductsMutation
}

// Where appends a list predicates to the ProductsUpdate builder.
func (pu *ProductsUpdate) Where(ps ...predicate.Products) *ProductsUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *ProductsUpdate) SetName(s string) *ProductsUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetInfo sets the "info" field.
func (pu *ProductsUpdate) SetInfo(s string) *ProductsUpdate {
	pu.mutation.SetInfo(s)
	return pu
}

// SetPrice sets the "price" field.
func (pu *ProductsUpdate) SetPrice(f float64) *ProductsUpdate {
	pu.mutation.ResetPrice()
	pu.mutation.SetPrice(f)
	return pu
}

// AddPrice adds f to the "price" field.
func (pu *ProductsUpdate) AddPrice(f float64) *ProductsUpdate {
	pu.mutation.AddPrice(f)
	return pu
}

// SetCategorieID sets the "categorie_id" field.
func (pu *ProductsUpdate) SetCategorieID(i int) *ProductsUpdate {
	pu.mutation.SetCategorieID(i)
	return pu
}

// SetUnionID sets the "union" edge to the Categories entity by ID.
func (pu *ProductsUpdate) SetUnionID(id int) *ProductsUpdate {
	pu.mutation.SetUnionID(id)
	return pu
}

// SetUnion sets the "union" edge to the Categories entity.
func (pu *ProductsUpdate) SetUnion(c *Categories) *ProductsUpdate {
	return pu.SetUnionID(c.ID)
}

// Mutation returns the ProductsMutation object of the builder.
func (pu *ProductsUpdate) Mutation() *ProductsMutation {
	return pu.mutation
}

// ClearUnion clears the "union" edge to the Categories entity.
func (pu *ProductsUpdate) ClearUnion() *ProductsUpdate {
	pu.mutation.ClearUnion()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProductsUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		if err = pu.check(); err != nil {
			return 0, err
		}
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pu.check(); err != nil {
				return 0, err
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			if pu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProductsUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProductsUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProductsUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *ProductsUpdate) check() error {
	if v, ok := pu.mutation.Name(); ok {
		if err := products.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Products.name": %w`, err)}
		}
	}
	if _, ok := pu.mutation.UnionID(); pu.mutation.UnionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Products.union"`)
	}
	return nil
}

func (pu *ProductsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   products.Table,
			Columns: products.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: products.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: products.FieldName,
		})
	}
	if value, ok := pu.mutation.Info(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: products.FieldInfo,
		})
	}
	if value, ok := pu.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: products.FieldPrice,
		})
	}
	if value, ok := pu.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: products.FieldPrice,
		})
	}
	if pu.mutation.UnionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   products.UnionTable,
			Columns: []string{products.UnionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: categories.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.UnionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   products.UnionTable,
			Columns: []string{products.UnionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: categories.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{products.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ProductsUpdateOne is the builder for updating a single Products entity.
type ProductsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductsMutation
}

// SetName sets the "name" field.
func (puo *ProductsUpdateOne) SetName(s string) *ProductsUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetInfo sets the "info" field.
func (puo *ProductsUpdateOne) SetInfo(s string) *ProductsUpdateOne {
	puo.mutation.SetInfo(s)
	return puo
}

// SetPrice sets the "price" field.
func (puo *ProductsUpdateOne) SetPrice(f float64) *ProductsUpdateOne {
	puo.mutation.ResetPrice()
	puo.mutation.SetPrice(f)
	return puo
}

// AddPrice adds f to the "price" field.
func (puo *ProductsUpdateOne) AddPrice(f float64) *ProductsUpdateOne {
	puo.mutation.AddPrice(f)
	return puo
}

// SetCategorieID sets the "categorie_id" field.
func (puo *ProductsUpdateOne) SetCategorieID(i int) *ProductsUpdateOne {
	puo.mutation.SetCategorieID(i)
	return puo
}

// SetUnionID sets the "union" edge to the Categories entity by ID.
func (puo *ProductsUpdateOne) SetUnionID(id int) *ProductsUpdateOne {
	puo.mutation.SetUnionID(id)
	return puo
}

// SetUnion sets the "union" edge to the Categories entity.
func (puo *ProductsUpdateOne) SetUnion(c *Categories) *ProductsUpdateOne {
	return puo.SetUnionID(c.ID)
}

// Mutation returns the ProductsMutation object of the builder.
func (puo *ProductsUpdateOne) Mutation() *ProductsMutation {
	return puo.mutation
}

// ClearUnion clears the "union" edge to the Categories entity.
func (puo *ProductsUpdateOne) ClearUnion() *ProductsUpdateOne {
	puo.mutation.ClearUnion()
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProductsUpdateOne) Select(field string, fields ...string) *ProductsUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Products entity.
func (puo *ProductsUpdateOne) Save(ctx context.Context) (*Products, error) {
	var (
		err  error
		node *Products
	)
	if len(puo.hooks) == 0 {
		if err = puo.check(); err != nil {
			return nil, err
		}
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = puo.check(); err != nil {
				return nil, err
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			if puo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProductsUpdateOne) SaveX(ctx context.Context) *Products {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProductsUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProductsUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *ProductsUpdateOne) check() error {
	if v, ok := puo.mutation.Name(); ok {
		if err := products.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Products.name": %w`, err)}
		}
	}
	if _, ok := puo.mutation.UnionID(); puo.mutation.UnionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Products.union"`)
	}
	return nil
}

func (puo *ProductsUpdateOne) sqlSave(ctx context.Context) (_node *Products, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   products.Table,
			Columns: products.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: products.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Products.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, products.FieldID)
		for _, f := range fields {
			if !products.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != products.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: products.FieldName,
		})
	}
	if value, ok := puo.mutation.Info(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: products.FieldInfo,
		})
	}
	if value, ok := puo.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: products.FieldPrice,
		})
	}
	if value, ok := puo.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: products.FieldPrice,
		})
	}
	if puo.mutation.UnionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   products.UnionTable,
			Columns: []string{products.UnionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: categories.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.UnionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   products.UnionTable,
			Columns: []string{products.UnionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: categories.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Products{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{products.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
