// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/baemestrada-source/bitsports/ent/categories"
)

// Categories is the model entity for the Categories schema.
type Categories struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CategoriesQuery when eager-loading is set.
	Edges CategoriesEdges `json:"edges"`
}

// CategoriesEdges holds the relations/edges for other nodes in the graph.
type CategoriesEdges struct {
	// Products holds the value of the products edge.
	Products []*Products `json:"products,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProductsOrErr returns the Products value or an error if the edge
// was not loaded in eager-loading.
func (e CategoriesEdges) ProductsOrErr() ([]*Products, error) {
	if e.loadedTypes[0] {
		return e.Products, nil
	}
	return nil, &NotLoadedError{edge: "products"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Categories) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case categories.FieldID:
			values[i] = new(sql.NullInt64)
		case categories.FieldName:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Categories", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Categories fields.
func (c *Categories) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case categories.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case categories.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		}
	}
	return nil
}

// QueryProducts queries the "products" edge of the Categories entity.
func (c *Categories) QueryProducts() *ProductsQuery {
	return (&CategoriesClient{config: c.config}).QueryProducts(c)
}

// Update returns a builder for updating this Categories.
// Note that you need to call Categories.Unwrap() before calling this method if this Categories
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Categories) Update() *CategoriesUpdateOne {
	return (&CategoriesClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Categories entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Categories) Unwrap() *Categories {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Categories is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Categories) String() string {
	var builder strings.Builder
	builder.WriteString("Categories(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", name=")
	builder.WriteString(c.Name)
	builder.WriteByte(')')
	return builder.String()
}

// CategoriesSlice is a parsable slice of Categories.
type CategoriesSlice []*Categories

func (c CategoriesSlice) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
