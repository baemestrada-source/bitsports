// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/baemestrada-source/bitsports/ent/categories"
	"github.com/baemestrada-source/bitsports/ent/products"
)

// Products is the model entity for the Products schema.
type Products struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Info holds the value of the "info" field.
	Info string `json:"info,omitempty"`
	// Price holds the value of the "price" field.
	Price float64 `json:"price,omitempty"`
	// CategorieID holds the value of the "categorie_id" field.
	CategorieID int `json:"categorie_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProductsQuery when eager-loading is set.
	Edges ProductsEdges `json:"edges"`
}

// ProductsEdges holds the relations/edges for other nodes in the graph.
type ProductsEdges struct {
	// Union holds the value of the union edge.
	Union *Categories `json:"union,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UnionOrErr returns the Union value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductsEdges) UnionOrErr() (*Categories, error) {
	if e.loadedTypes[0] {
		if e.Union == nil {
			// The edge union was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: categories.Label}
		}
		return e.Union, nil
	}
	return nil, &NotLoadedError{edge: "union"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Products) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case products.FieldPrice:
			values[i] = new(sql.NullFloat64)
		case products.FieldID, products.FieldCategorieID:
			values[i] = new(sql.NullInt64)
		case products.FieldName, products.FieldInfo:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Products", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Products fields.
func (pr *Products) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case products.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case products.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pr.Name = value.String
			}
		case products.FieldInfo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field info", values[i])
			} else if value.Valid {
				pr.Info = value.String
			}
		case products.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				pr.Price = value.Float64
			}
		case products.FieldCategorieID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field categorie_id", values[i])
			} else if value.Valid {
				pr.CategorieID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryUnion queries the "union" edge of the Products entity.
func (pr *Products) QueryUnion() *CategoriesQuery {
	return (&ProductsClient{config: pr.config}).QueryUnion(pr)
}

// Update returns a builder for updating this Products.
// Note that you need to call Products.Unwrap() before calling this method if this Products
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Products) Update() *ProductsUpdateOne {
	return (&ProductsClient{config: pr.config}).UpdateOne(pr)
}

// Unwrap unwraps the Products entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Products) Unwrap() *Products {
	tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Products is not a transactional entity")
	}
	pr.config.driver = tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Products) String() string {
	var builder strings.Builder
	builder.WriteString("Products(")
	builder.WriteString(fmt.Sprintf("id=%v", pr.ID))
	builder.WriteString(", name=")
	builder.WriteString(pr.Name)
	builder.WriteString(", info=")
	builder.WriteString(pr.Info)
	builder.WriteString(", price=")
	builder.WriteString(fmt.Sprintf("%v", pr.Price))
	builder.WriteString(", categorie_id=")
	builder.WriteString(fmt.Sprintf("%v", pr.CategorieID))
	builder.WriteByte(')')
	return builder.String()
}

// ProductsSlice is a parsable slice of Products.
type ProductsSlice []*Products

func (pr ProductsSlice) config(cfg config) {
	for _i := range pr {
		pr[_i].config = cfg
	}
}
